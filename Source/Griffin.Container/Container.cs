using System;
using System.Collections.Generic;

namespace Griffin.Container
{
    /// <summary>
    /// Main container implementation.
    /// </summary>
    /// <remarks>Registrations should be managed by a <see cref="IContainerRegistrar"/> implementation and this
    /// container should the be built by a <see cref="IContainerBuilder"/> implementation. Look at the namespace documentation
    /// for an example.</remarks>
    public class Container : ContainerBase, IParentContainer
    {
        private readonly IInstanceStorageFactory _factory;
        private readonly IInstanceStorage _storage;

        /// <summary>
        /// Initializes a new instance of the <see cref="Container"/> class.
        /// </summary>
        /// <param name="serviceMappings">The service mappings which as been generated by a <see cref="IContainerBuilder"/>.</param>
        public Container(IDictionary<Type, List<BuildPlan>> serviceMappings) : base(serviceMappings)
        {
            if (serviceMappings == null) throw new ArgumentNullException("serviceMappings");

            _factory = new DefaultInstanceStorageFactory();
            _storage = _factory.CreateParent();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Container"/> class.
        /// </summary>
        /// <param name="serviceMappings">The service mappings which as been generated by a <see cref="IContainerBuilder"/>.</param>
        /// <param name="factory">Used to create the storage</param>
        public Container(Dictionary<Type, List<BuildPlan>> serviceMappings, IInstanceStorageFactory factory)
            : base(serviceMappings)
        {
            if (serviceMappings == null) throw new ArgumentNullException("serviceMappings");
            _factory = factory;
            _storage = factory.CreateParent();
        }

        #region IParentContainer Members

        /// <summary>
        /// Creates the child container.
        /// </summary>
        /// <returns>Created container.</returns>
        public virtual IChildContainer CreateChildContainer()
        {
            return new ChildContainer(ServiceMappings, _storage, _factory.CreateScoped());
        }

        #endregion

        /// <summary>
        /// Get instance for the specified buil plan
        /// </summary>
        /// <param name="bp">Build plan</param>
        /// <returns>Created instance (throw exception if it can't be built).</returns>
        protected override object GetInstance(BuildPlan bp)
        {
            var context = new CreateContext {Container = this, Scoped = null, Singletons = _storage};
            return bp.GetInstance(context);
        }
    }
}